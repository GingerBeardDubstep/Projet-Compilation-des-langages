tree=(ROOT (CLASS Point (FORMALPARAM var x Integer) (FORMALPARAM var y Integer) (FORMALPARAM var name String) (CLASSBLOCK (CONSTRUCTOR Point (FORMALPARAM var x Integer) (FORMALPARAM var y Integer) (FORMALPARAM var name String) (BLOCK (AFFECT (ATOMID this (SELECTION next)) (+ (ATOMID this (SELECTION next)) 1)))) (VARIABLECLASSE next Integer var static) (AFFECT next 0) (VARIABLECLASSE clone Point var) (METHODE setName (METHODEPARAM s String) (BLOCK (AFFECT (ATOMID this (SELECTION name)) s))) (METHODE getx getx (ATOMID this (SELECTION x))) (METHODE gety gety (ATOMID this (SELECTION y))) (METHODE isCloned isCloned (<> (ATOMID this (SELECTION hasClone)) 0)) (METHODE move (METHODEPARAM dx Integer) (METHODEPARAM dy Integer) (METHODEPARAM verbose Integer) move (BLOCK (AFFECT (ATOMID this (SELECTION x)) (+ (ATOMID this (SELECTION x)) dx)) (AFFECT (ATOMID this (SELECTION y)) (+ (ATOMID this (SELECTION y)) dy)) (IF verbose (BLOCK (INSTEXPR (ATOMID this (MESSAGE print verbose)))) BLOCK) (AFFECT result this))) (METHODE print (METHODEPARAM verbose Integer) (BLOCK (IF verbose (INSTEXPR (ATOMID "Inside Point::print" (MESSAGE println))) BLOCK) (INSTEXPR (ATOMID this (SELECTION name) (MESSAGE print))) (INSTEXPR (ATOMID (& (& (& (& "= (" (ATOMID this (SELECTION x) (MESSAGE toString))) ", ") (ATOMID this (SELECTION y) (MESSAGE toString))) ")") (MESSAGE println))))) (METHODE clone clone (BLOCK (AFFECT (ATOMID this (SELECTION clone)) (INSTANCIATION Point (ATOMID this (SELECTION x)) (ATOMID this (SELECTION y)) (& (ATOMID this (SELECTION name)) "`"))) (AFFECT (ATOMID this (SELECTION hasClone)) 1) (AFFECT result (ATOMID this (SELECTION clone))))) (METHODE allClones (BLOCK (INSTEXPR (ATOMID this (MESSAGE print 0))) (IF (ATOMID this (MESSAGE isCloned)) (BLOCK (INSTEXPR (ATOMID this (SELECTION clone) (MESSAGE allClones)))) BLOCK))) (METHODE egal (METHODEPARAM p Point) egal (BLOCK (LOCALVARIABLE b1 Integer) (AFFECT b1 (- (ATOMID p (MESSAGE getx)) (ATOMID this (SELECTION x)))) (LOCALVARIABLE b2 Integer) (AFFECT b2 (- (ATOMID p (MESSAGE gety)) (ATOMID this (SELECTION y)))) (IF b1 (AFFECT result 0) (AFFECT result (= b2 0))))))) (CLASS Couleur (FORMALPARAM var coul Integer) (CLASSBLOCK (CONSTRUCTOR Couleur (FORMALPARAM var coul Integer) (BLOCK (IF (< coul 0) (AFFECT coul 0) (IF (> coul 2) (AFFECT coul 0) BLOCK)) (AFFECT (ATOMID this (SELECTION coul)) coul))) (METHODE name (METHODEPARAM verbose Integer) name (BLOCK (LOCALVARIABLE aux String) (AFFECT aux "Blanc") (IF verbose (INSTEXPR (ATOMID "Inside Couleur::couleur" (MESSAGE println))) BLOCK) (AFFECT result aux))) (METHODE estGris estGris (BLOCK (INSTEXPR (ATOMID "Inside Couleur::estGris" (MESSAGE println))) (AFFECT result (= (ATOMID this (SELECTION coul)) 2)))))) (CLASS PointColore (FORMALPARAM x Integer) (FORMALPARAM y Integer) (FORMALPARAM var coul Couleur) Point (CLASSBLOCK (CONSTRUCTOR PointColore Point (FORMALPARAM x Integer) (FORMALPARAM y Integer) (FORMALPARAM var coul Couleur) x y (& "P-" (ATOMID CptPoint (MESSAGE howMany) (MESSAGE toString))) BLOCK) (METHODE couleur couleur (ATOMID this (SELECTION coul))) (METHODE colore colore (<> (ATOMID this (SELECTION coul) (MESSAGE estGris)) 0)) (METHODE clone override clone (BLOCK (AFFECT result (INSTANCIATION PointColore (ATOMID this (SELECTION x)) (ATOMID this (SELECTION y)) (ATOMID this (SELECTION coul)))) (INSTEXPR (ATOMID result (MESSAGE setName (& (ATOMID this (SELECTION name)) "'")))) (INSTEXPR (ATOMID this (SELECTION hasClone)) (= 1)) (AFFECT (ATOMID this (SELECTION clone)) result))) (METHODE estGris estGris (ATOMID this (SELECTION coul) (MESSAGE estGris))) (METHODE print override (METHODEPARAM verbose Integer) (BLOCK (IF verbose (INSTEXPR (ATOMID "Inside PointColore::print" (MESSAGE println))) BLOCK) (INSTEXPR (ATOMID super (MESSAGE print verbose))) (INSTEXPR (ATOMID this (MESSAGE couleur) (MESSAGE name verbose) (MESSAGE println))))))) (CLASS PointNoir (FORMALPARAM xc Integer) (FORMALPARAM yc Integer) PointColore (CLASSBLOCK (CONSTRUCTOR PointNoir PointColore (FORMALPARAM xc Integer) (FORMALPARAM yc Integer) xc yc (ATOMID CouleurFactory (MESSAGE noir)) BLOCK) (METHODE estGris override estGris 0) (METHODE couleur override couleur (ATOMID CouleurFactory (MESSAGE blanc))))) (CLASS DefaultPoint PointColore (CLASSBLOCK (CONSTRUCTOR DefaultPoint PointColore 0 0 (ATOMID CouleurFactory (MESSAGE blanc)) BLOCK) (METHODE estGris override estGris 0) (METHODE couleur override couleur (ATOMID CouleurFactory (MESSAGE blanc))))) (CLASS Test (CLASSBLOCK (CONSTRUCTOR Test BLOCK) (METHODE test static (METHODEPARAM p Point) (METHODEPARAM p2 PointColore) (METHODEPARAM p3 PointNoir) (BLOCK (LOCALVARIABLE c String) (LOCALVARIABLE c2 String) (LOCALVARIABLE c3 String) (LOCALVARIABLE true Integer) (AFFECT true 1) (LOCALVARIABLE false Integer) (AFFECT false 0) (INSTEXPR (ATOMID p (MESSAGE print true))) (INSTEXPR (ATOMID p2 (MESSAGE print true))) (IF (<> (ATOMID p2 (MESSAGE colore)) 0) (AFFECT c "colore") (AFFECT c "gris")) (IF (<> (ATOMID p3 (MESSAGE colore)) 0) (AFFECT c2 "colore") (AFFECT c2 "gris")) (IF (<> (ATOMID p3 (MESSAGE colore)) 0) (AFFECT c3 "colore") (AFFECT c3 "gris")) (INSTEXPR (ATOMID "Resultats de test: " (MESSAGE println))) (INSTEXPR (ATOMID c (MESSAGE print))) (INSTEXPR (ATOMID " " (MESSAGE print))) (INSTEXPR (ATOMID c2 (MESSAGE print))) (INSTEXPR (ATOMID " " (MESSAGE print))) (INSTEXPR (ATOMID c3 (MESSAGE print))) (INSTEXPR (ATOMID "" (MESSAGE println))))) (METHODE test2 static (METHODEPARAM p PointColore) (BLOCK (INSTEXPR (ATOMID p (MESSAGE couleur) (MESSAGE name 0) (MESSAGE print))))))) (CLASS A (CLASSBLOCK (CONSTRUCTOR A (BLOCK (AFFECT (ATOMID this (SELECTION v)) 1))) (VARIABLECLASSE v Integer var) (METHODE f (BLOCK (INSTEXPR (ATOMID "A::f()\n" (MESSAGE print))))) (METHODE h (METHODEPARAM x Integer) (METHODEPARAM y Integer) h (+ x y)))) (CLASS A2 A (CLASSBLOCK (CONSTRUCTOR A2 A (BLOCK (AFFECT (ATOMID this (SELECTION v)) "hello"))) (VARIABLECLASSE v String var) (METHODE f override (BLOCK (INSTEXPR (ATOMID "A2::f()\n" (MESSAGE print))))) (METHODE g (BLOCK (AFFECT (ATOMID this (SELECTION v)) "world") (AFFECT (ATOMID (AS A this) (SELECTION v)) 1) (INSTEXPR (ATOMID this (MESSAGE f))) (INSTEXPR (ATOMID (AS A this) (MESSAGE f))))) (METHODE h override (METHODEPARAM x Integer) (METHODEPARAM y Integer) h (ATOMID super (MESSAGE h x y))))) (BLOCK (LOCALVARIABLE true Integer) (AFFECT true 1) (LOCALVARIABLE p1 Point) (AFFECT p1 (INSTANCIATION Point 1 5 "p1")) (LOCALVARIABLE p2 Point) (AFFECT p2 (INSTANCIATION Point 2 3 "p2")) (LOCALVARIABLE p3 Point) (AFFECT p3 (INSTANCIATION Point 0 0 "p3")) (LOCALVARIABLE o PointColore) (AFFECT o (INSTANCIATION PointColore 50 100 (ATOMID CouleurFactory (MESSAGE noir)))) (LOCALVARIABLE o2 Point) (LOCALVARIABLE pn PointNoir) (AFFECT pn (INSTANCIATION PointNoir 1 1)) (LOCALVARIABLE dp DefaultPoint) (AFFECT dp (INSTANCIATION DefaultPoint)) (INSTEXPR (ATOMID p2 (MESSAGE move (ATOMID p1 (MESSAGE getx)) (ATOMID p1 (MESSAGE gety)) true))) (INSTEXPR (ATOMID o (MESSAGE setName "origine"))) (INSTEXPR (ATOMID p2 (MESSAGE move (- (- (ATOMID p1 (MESSAGE getx)) (* 2 5)) 3) (ATOMID p1 (MESSAGE gety)) true))) (INSTEXPR (ATOMID o (MESSAGE print true))) (INSTEXPR (ATOMID p2 (MESSAGE print true))) (INSTEXPR (ATOMID "\nClonage de o " (MESSAGE println))) (AFFECT o2 (ATOMID o (MESSAGE clone))) (INSTEXPR (ATOMID o2 (MESSAGE print true))) (INSTEXPR (ATOMID o2 (SELECTION clone) (MESSAGE move 54 36 0) (MESSAGE print true))) (INSTEXPR (ATOMID o (MESSAGE allClones))) (INSTEXPR (ATOMID "Fin de la  liste\n" (MESSAGE println))) (INSTEXPR (ATOMID "Seconde liste des clones de o:" (MESSAGE println))) (AFFECT o2 (ATOMID p1 (MESSAGE clone))) (INSTEXPR (ATOMID o2 (MESSAGE move 2 3 0))) (INSTEXPR (ATOMID p1 (MESSAGE print 0))) (INSTEXPR (ATOMID o2 (MESSAGE clone))) (INSTEXPR (ATOMID p1 (MESSAGE allClones))) (INSTEXPR (ATOMID "Fin de la seconde liste\n" (MESSAGE println))) (INSTEXPR (ATOMID "test(Point, PointColore, PointNoir)" (MESSAGE println))) (INSTEXPR (ATOMID Test (MESSAGE test p1 o pn))) (INSTEXPR (ATOMID "test(PointNoir, PointNoir, PointNoir)" (MESSAGE println))) (INSTEXPR (ATOMID Test (MESSAGE test pn pn pn))) (AFFECT p1 pn) (INSTEXPR (ATOMID Test (MESSAGE test2 o))) (INSTEXPR (ATOMID Test (MESSAGE test2 pn))) (AFFECT o pn) (INSTEXPR (ATOMID "test(PointNoir, PointNoir, PointNoir)" (MESSAGE println))) (INSTEXPR (ATOMID Test (MESSAGE test p1 o pn))) (INSTEXPR (ATOMID Test (MESSAGE test2 o))) (INSTEXPR (ATOMID Test (MESSAGE test2 pn))) (INSTEXPR (ATOMID "\nDone" (MESSAGE println)))))
